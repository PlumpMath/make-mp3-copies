#+TITLE:       Make MP3 copies of FLAC, etc.
#+AUTHOR:      Harold Carr
#+DESCRIPTION: Make MP3 copies of FLAC, etc.
#+PROPERTY:    tangle MakeMP3Copies.hs
#+OPTIONS:     num:nil toc:t
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:t ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js

# Created       : 2013 Sep 09 (Mon) 17:41:15 by carr.
Last Modified : 2013 Sep 10 (Tue) 15:54:34 by carr.

------------------------------------------------------------------------------
* Shelly

- [[http://hackage.haskell.org/packages/archive/shelly/1.3.0.7/doc/html/Shelly.html]]
- [[https://github.com/yesodweb/Shelly.hs]]
- [[https://github.com/yesodweb/Shelly.hs/blob/master/doc/shell-typed.markdown]]
- [[https://github.com/yesodweb/Shelly.hs/blob/master/src/Shelly.hs]]
- http://stackoverflow.com/questions/18187944/haskell-shelly-sample-code

Other haskell shell examples: [[http://www.haskell.org/haskellwiki/Applications_and_libraries/Operating_system#Haskell_shell_examples]]

#+BEGIN_EXAMPLE
sudo cabal install shelly shelly-extra
#+END_EXAMPLE

------------------------------------------------------------------------------
* FLAC to MP3

- [[https://wiki.archlinux.org/index.php/Convert_Flac_to_Mp3]]
- [[http://www.discogs.com/groups/topic/151711]]
- [[http://www.ffmpeg.org/ffmpeg.html]]

#+BEGIN_EXAMPLE
sudo port search ffmpeg
sudo port install ffmpeg @1.2.2
ffmpeg -i "/Volumes/my-music/Ahmad Jamal/The Awakening/01-The Awakening.flac" -qscale:a 0 "/tmp/JUNK.mp3"
#+END_EXAMPLE


#+BEGIN_SRC haskell
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExtendedDefaultRules #-}
{-# OPTIONS_GHC -fno-warn-type-defaults #-}

import           Control.Applicative
import           Control.Exception (bracket, handle, SomeException)
import           Control.Monad
import           Control.Monad.IO.Class
import           Data.Maybe (fromJust)
import qualified Data.Text as T
import           Shelly
import           System.Directory
import           System.FilePath
import           System.IO (IOMode(..), hClose, hFileSize, openFile)
default (T.Text)


startingPath = "."
copyRoot = "/tmp/JUNK/"


main = shelly $ verbosely $ do
    processDir startingPath


processDir :: Shelly.FilePath -> Sh ()
processDir path = do
    contents <- ls path
    forM_ contents $ \fp -> do
            isDir <- test_d fp
            if isDir
                then do { maybeCreateDir fp; processDir fp}
                else processFile fp $ takeExtension $ fpToString fp


maybeCreateDir :: Shelly.FilePath -> Sh ()
maybeCreateDir fp = do
    let cp = mkCpFilePath fp
    dirExists <- test_d cp
    if dirExists
        then                  say "DIR EXISTS"  cp
        else do { mkdir_p cp; say "DIR CREATED" cp }


processFile :: Shelly.FilePath -> String -> Sh ()
processFile fp ".flac" = maybeConvert  fp
processFile fp ".mp3"  = maybeCopy     fp
processFile fp ".jpg"  = maybeCopy     fp
processFile fp _       = say "IGNORED" fp


maybeConvert fp = do
    let cp = mkCpFilePath (fromText (T.pack (replaceExtension (fpToString fp) ".mp3")))
    fileExists <- test_f cp
    if fileExists
        then convertIf fp cp
        else convert   fp cp


convertIf :: Shelly.FilePath -> Shelly.FilePath -> Sh ()
convertIf fp cp = do
    fpSize <- liftIO . getFileSize         $ fpToString fp
    fpTime <- liftIO . getModificationTime $ fpToString fp
    cpSize <- liftIO . getFileSize         $ fpToString cp
    cpTime <- liftIO . getModificationTime $ fpToString cp
    if fpTime > cpTime || (fromJust fpSize) /= (fromJust cpSize)
        then convert fp cp
        else say "FILE EXISTS" cp


convert fp copy = do
    flacToMp3 (toTextIgnore fp) (toTextIgnore copy)
    say "FILE CONVERTED" copy
  where
    flacToMp3 from to = run_ "ffmpeg" ["-i", from, "-qscale:a", "0", to]
    -- flacToMp3 from to = liftIO $ putStrLn $ "ffmpeg" ++ (show ["-i", "-n", from, "-qscale:a", "0", to])


maybeCopy fp = do
    let cp = mkCpFilePath fp
    fileExists <- test_f cp
    if fileExists
        then copyIf fp cp
        else copy   fp cp


copyIf :: Shelly.FilePath -> Shelly.FilePath -> Sh ()
copyIf fp cp = do
    fpSize <- liftIO . getFileSize         $ fpToString fp
    fpTime <- liftIO . getModificationTime $ fpToString fp
    cpSize <- liftIO . getFileSize         $ fpToString cp
    cpTime <- liftIO . getModificationTime $ fpToString cp
    if fpTime > cpTime || (fromJust fpSize) /= (fromJust cpSize)
        then copy fp cp
        else say "FILE EXISTS" cp


copy fp copyFile = do
    cp fp copyFile
    say "FILE COPIED" copyFile


mkCpFilePath :: Shelly.FilePath -> Shelly.FilePath
mkCpFilePath path =
    (fpToString copyRoot) Shelly.</> (fpToString path)

fpToString :: Shelly.FilePath -> String
fpToString fp = T.unpack $ toTextIgnore fp


say msg fp =
    liftIO $ putStrLn $ show (fpToString fp) ++ " " ++ msg


getFileSize :: System.FilePath.FilePath -> IO (Maybe Integer)
getFileSize path = handle handler $
    bracket (openFile path ReadMode) (hClose) (\h -> do
        size <- hFileSize h
        return $ Just size)
  where
    handler :: SomeException -> IO (Maybe Integer)
    handler _ = return Nothing
#+END_SRC

#+BEGIN_EXAMPLE
export MP3=~/.sync/.esync/java/org/openhc/make-mp3-copies
alias m3='$MP3/MakeMP3Copies'
cd $MP3
ghc MakeMP3Copies.hs
export PATH=.:$PATH
pushd "/Volumes/my-music/Ahmad Jamal/"
m3

if orginal flac or wave check exists and date
#+END_EXAMPLE

